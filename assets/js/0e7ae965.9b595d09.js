"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[370],{41675:e=>{e.exports=JSON.parse('{"functions":[{"name":"createSelectorHook","desc":"Creates a useSelector hook that uses the given context. This should be used in\\nconjunction with a Provider that was passed a custom context.\\n\\n```lua\\n-- The initial value of the context doesn\'t matter, it will be overwritten.\\nlocal Context = React.createContext(nil)\\n\\nlocal useSelector = createSelectorHook(Context)\\n```","params":[{"name":"context","desc":"","lua_type":"ReactContext<Store>"}],"returns":[{"desc":"","lua_type":"useSelector"}],"function_type":"static","source":{"line":29,"path":"src/createSelectorHook.luau"}},{"name":"useDispatch","desc":"Returns the dispatch function of Rodux store that was passed into the \\nProvider.\\n\\n```lua\\nlocal function ExampleButton(props)\\n\\tlocal dispatch = ReactRodux.useDispatch()\\n\\n\\treturn e(Button, {\\n\\t\\tonClick = function()\\n\\t\\t\\tdispatch({\\n\\t\\t\\t\\ttype = \\"moneyAdded\\",\\n\\t\\t\\t\\tamount = 100,\\n\\t\\t\\t})\\n\\t\\tend,\\n\\t})\\nend\\n```","params":[{"name":"context","desc":"","lua_type":"ReactContext<Store>"}],"returns":[{"desc":"","lua_type":"(Action) -> ()"}],"function_type":"static","source":{"line":28,"path":"src/useDispatch.luau"}},{"name":"createStoreHook","desc":"Creates a useStore hook that uses the given context. This should be used in\\nconjunction with a Provider that was passed a custom context.\\n\\n```lua\\n-- The initial value of the context doesn\'t matter, it will be overwritten.\\nlocal Context = React.createContext(nil)\\n\\nlocal useStore = createStoreHook(Context)\\n```","params":[{"name":"context","desc":"","lua_type":"ReactContext<Store>"}],"returns":[{"desc":"","lua_type":"useStore"}],"function_type":"static","source":{"line":20,"path":"src/createStoreHook.luau"}},{"name":"Provider","desc":"The Provider component makes your Rodux store available to all of its \\nchildren. You should mount this at the top level of your React tree if so \\nyour whole app is able to use React Rodux.\\n\\n```lua\\nlocal function App(props)\\n\\treturn e(ReactRodux.Provider, {\\n\\t\\tstore = store,\\n\\t}, {\\n\\t\\t-- your app goes here\\n\\t})\\nend\\n```","params":[{"name":"props","desc":"","lua_type":"ProviderProps"}],"returns":[],"function_type":"static","source":{"line":39,"path":"src/Provider.luau"}},{"name":"createDispatchHook","desc":"Creates a useDispatch hook that uses the given context. This should be used in\\nconjunction with a Provider that was passed a custom context.\\n\\n```lua\\n-- The initial value of the context doesn\'t matter, it will be overwritten.\\nlocal Context = React.createContext(nil)\\n\\nlocal useDispatch = createDispatchHook(Context)\\n```","params":[{"name":"context","desc":"","lua_type":"ReactContext<Store>"}],"returns":[{"desc":"","lua_type":"useDispatch"}],"function_type":"static","source":{"line":20,"path":"src/createDispatchHook.luau"}},{"name":"useSelector","desc":"This is the primary way to get data from a Rodux store with React Rodux. \\nMultiple useSelector hooks can be used in the same component.\\n\\nBy default, useSelector will directly compare the previous value returned \\nby selector to the most recent one. When the old and new values are not\\nequal, the component will be re-rendered with the updated state. You can \\noptionally pass a function to equalityFn for finer control over this.\\n\\n```lua\\nlocal function ExampleLabel(props)\\n\\tlocal money = ReactRodux.useSelector(function(state)\\n\\t\\treturn state.money\\n\\tend)\\n\\n\\treturn e(MoneyLabel, {\\n\\t\\tamount = money,\\n\\t})\\nend\\n```","params":[{"name":"context","desc":"","lua_type":"ReactContext<Store>"}],"returns":[{"desc":"","lua_type":"Selection"}],"function_type":"static","source":{"line":30,"path":"src/useSelector.luau"}},{"name":"useStore","desc":"Returns the Rodux store that was passed into the Provider. This might be\\nuseful if you need to use the store for something other than getting state\\nor dispatching an action, otherwise `useSelector` and `useDispatch` are\\nbetter options.\\n\\n```lua\\nlocal function App(props)\\n\\tlocal store = useStore()\\n\\n\\treturn e(Button, {\\n\\t\\tonClick = function()\\n\\t\\t\\tstore:destruct()\\n\\t\\tend,\\n\\t})\\nend\\n```","params":[{"name":"context","desc":"","lua_type":"ReactContext<Store>"}],"returns":[{"desc":"","lua_type":"Store"}],"function_type":"static","source":{"line":27,"path":"src/useStore.luau"}}],"properties":[],"types":[{"name":"ProviderProps","desc":"","fields":[{"name":"store:","lua_type":"Store","desc":"Your Rodux store"},{"name":"context:","lua_type":"Context?","desc":"Optional custom context"}],"source":{"line":19,"path":"src/Provider.luau"}}],"name":"ReactRodux","desc":"","source":{"line":13,"path":"src/init.luau"}}')}}]);