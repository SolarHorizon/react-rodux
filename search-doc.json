[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/react-rodux/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/react-rodux/docs/intro#installation","content":""},{"title":"Wally (Recommended)​","type":1,"pageTitle":"Getting Started","url":"/react-rodux/docs/intro#wally-recommended","content":"React Rodux is available as a Wally package. wally.toml [dependencies] # make sure to check what the latest version is before adding to your manifest! ReactRodux = &quot;solarhorizon/react-rodux@0.1.0&quot;  "},{"title":"Manual​","type":1,"pageTitle":"Getting Started","url":"/react-rodux/docs/intro#manual","content":"Download ReactRodux.rbxm from the latest releaseand drop it into your project. "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/react-rodux/docs/intro#usage","content":"Check out the API documentation! "},{"title":"ReactRodux","type":0,"sectionRef":"#","url":"/react-rodux/api/ReactRodux","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#functions","content":" "},{"title":"createSelectorHook​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#createSelectorHook","content":"&lt;/&gt; ReactRodux.createSelectorHook(context: ReactContext&lt;Store&gt;) → useSelector Creates a useSelector hook that uses the given context. This should be used in conjunction with a Provider that was passed a custom context. -- The initial value of the context doesn't matter, it will be overwritten. local Context = React.createContext(nil) local useSelector = createSelectorHook(Context)   "},{"title":"createDispatchHook​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#createDispatchHook","content":"&lt;/&gt; ReactRodux.createDispatchHook(context: ReactContext&lt;Store&gt;) → useStore Returns the dispatch function of Rodux store that was passed into the Provider. local function ExampleButton(props) local dispatch = ReactRodux.useDispatch() return e(Button, { onClick = function() dispatch({ type = &quot;moneyAdded&quot;, amount = 100, }) end, }) end   "},{"title":"createStoreHook​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#createStoreHook","content":"&lt;/&gt; ReactRodux.createStoreHook(context: ReactContext&lt;Store&gt;) → useStore Creates a useStore hook that uses the given context. This should be used in conjunction with a Provider that was passed a custom context. -- The initial value of the context doesn't matter, it will be overwritten. local Context = React.createContext(nil) local useStore = createStoreHook(Context)   "},{"title":"Provider​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#Provider","content":"&lt;/&gt; ReactRodux.Provider(props: ProviderProps) → () "},{"title":"Types","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux##","content":""},{"title":"​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#ProviderProps","content":"interface ProviderProps { store:: Store-- Your Rodux store context:: Context?-- Optional custom context }  The Provider component makes your Rodux store available to all of its children. You should mount this at the top level of your React tree if so your whole app is able to use React Rodux. local function App(props) return e(ReactRodux.Provider, { store = store, }, { -- your app goes here }) end   "},{"title":"createDispatchHook​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#createDispatchHook","content":"&lt;/&gt; ReactRodux.createDispatchHook(context: ReactContext&lt;Store&gt;) → useDispatch Creates a useDispatch hook that uses the given context. This should be used in conjunction with a Provider that was passed a custom context. -- The initial value of the context doesn't matter, it will be overwritten. local Context = React.createContext(nil) local useDispatch = createDispatchHook(Context)   "},{"title":"createSelectorHook​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#createSelectorHook","content":"&lt;/&gt; ReactRodux.createSelectorHook(context: ReactContext&lt;Store&gt;) → useStore This is the primary way to get data from a Rodux store with React Rodux. Multiple useSelector hooks can be used in the same component. By default, useSelector will directly compare the previous value returned by selector to the most recent one. When the old and new values are not equal, the component will be re-rendered with the updated state. You can optionally pass a function to equalityFn for finer control over this. local function ExampleLabel(props) local money = ReactRodux.useSelector(function(state) return state.money end) return e(MoneyLabel, { amount = money, }) end   "},{"title":"createDispatchHook​","type":1,"pageTitle":"ReactRodux","url":"/react-rodux/api/ReactRodux#createDispatchHook","content":"&lt;/&gt; ReactRodux.createDispatchHook(context: ReactContext&lt;Store&gt;) → useStore Returns the Rodux store that was passed into the Provider. This might be useful if you need to use the store for something other than getting state or dispatching an action, otherwise useSelector and useDispatch are better options. local function App(props) local store = useStore() return e(Button, { onClick = function() store:destruct() end, }) end  "}]